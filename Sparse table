int MAXK=20; // For N<= 1e6
vector<vector<int>> st;

//query function
int func(int a, int b){
    return min(a,b);
}
int nill=INT64_MAX;

//pre-computation
void build(vector<int> &vec){
    int N = vec.size();
    st.assign(N, vector<int>(MAXK, 0));
    for(int i=0; i<N; i++){
        st[i][0] = vec[i];
    }
    for(int k=1; k <= MAXK ; k++){
        for(int i=0; i+(1LL<<k) <= N; i++){
            st[i][k] = func(st[i][k-1] , st[ i + (1LL<<(k-1)) ][k-1]);
        }
    }
}

//in general, answering queries for range [L,R]
int query(int L, int R){
    int ans=nill;
    for(int k= MAXK; k>=0; k--){
        if ( (1LL<<k) <= R-L+1 ){
            ans = func(ans, st[L][k]);
            L += 1LL<<k;
        }
    }
    return ans;
}

//for idempotesnt func (min, max, gcd, or, and)
const int N=1e6;
int lg[N+1];
//[L,R] in O(1)
int query(int L, int R){
    int j=lg[R-L+1]; //precompute log2 in main()
    int ans=func(st[L][j], st[R-(1LL<<j)+1][j]);
    return ans;
}

//max R such that [L,R] >=val
int query2(int L, int val){
    int i=L;
    int res=nill;
    for(int j=MAXK;j>=0;j--){
        if(i+(1LL<<j)<=n && func(res,st[i][j])>=val){
            res=func(res, st[i][j]);
            i=i+(1LL<<j);
        }
    }
    return i-1;
}

int32_t main(){
    lg[1]=0;
    for(int i=2; i<= N ; i++) lg[i] = lg[i/2] + 1;
}
