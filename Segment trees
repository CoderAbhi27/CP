template <class T>
class segTree{
public:
    vector<T> a, seg;
    int n;
    T nill=T();

    segTree(int sz, vector<T> arr=vector<T>(0)) {
        n=sz;
        if(arr.size()) a=arr;
        else a=vector<T>(n,nill);
        seg.assign(4*n, nill);
        build();
    }

    T func(T,T);

    void build(int id, int l, int r){
        if(r-l==1){
            seg[id]=a[l];
            return;
        }
        int mid=(l+r)/2;
        build(2*id,l,mid);
        build(2*id+1,mid,r);
        seg[id]=func(seg[2*id], seg[2*id+1]);
    }
    void build(){build(1,0,n);}

    //[x,y)
    T query(int x, int y, int id, int l, int r){
        if(y<=l || x>=r) return nill;
        if(x<=l && r<=y) return seg[id];
        int mid=(l+r)/2;
        return func(query(x,y,id*2,l,mid), query(x,y,id*2+1,mid,r));
    }
    T query(int x, int y){return query(x,y,1,0,n);}

    void update(int i, T val, int id, int l, int r){
        if(r-l==1){
            a[i]=val;
            seg[id]=val;
            return;
        }
        int mid=(l+r)/2;
        if(i<mid) update(i,val,2*id,l,mid);
        else update(i,val,2*id+1,mid,r);
        seg[id]=func(seg[2*id], seg[2*id+1]);
    }
    void update(int i, T val){update(i,val,1,0,n);}

};

struct Node{
    int mn;
    int cnt;
    Node(int xx, int yy){mn=xx; cnt=yy;}
    Node(){mn=INF; cnt=0;}
};

//must return T()
template <class T>
T segTree<T>::func(T a, T b){
    return min(a,b);
    // if(a.mn==b.mn) return T(a.mn, (a.cnt+b.cnt));
    // if(a.mn<b.mn) return a;
    // return b;
}
