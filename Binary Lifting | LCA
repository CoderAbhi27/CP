int x=20;
vvi adj, par;
vi lev;

//using binary lifting to find 2^jth parent of i
void dfs(int i, int p){
    par[i][0]=p;
    rep(j,1,x+1)
    {
        if(par[i][j-1]<=1) break;
        par[i][j] = par[ par[i][j-1] ][j-1];
    }
    for(auto j:adj[i]){
        if(j==p) continue;
        lev[j]=lev[i]+1;
        dfs(j,i);
    }
}

int kth_par(int i, int k){
    for(int j=x;j>=0;j--)
    {
        if(k&(1LL<<j)) i=par[i][j];
    }
    return i;
}

int lca(int a, int b){
    if(lev[a]>lev[b]) swap(a,b);
    b= kth_par(b,lev[b]-lev[a]);
    if(a==b) return a;
    for(int j=x;j>=0;j--){
        if(par[a][j]!=par[b][j]){
            a=par[a][j];
            b=par[b][j];
        }
    }
    return par[a][0];
}
