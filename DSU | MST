vi par, rnk;

void make_set(int n)
{
    par.assign(n+1,0);
    rnk.assign(n+1,1);
    rep(i,1,n+1){
        par[i]=i;
    }
}

int find_set(int x)
{
    if(par[x]==x) return x;
    return par[x]=find_set(par[x]);
}

bool union_set(int a, int b)
{
    int p1=find_set(a), p2=find_set(b);
    if(p1==p2) return 0;
    if(rnk[p1]>rnk[p2]){
        par[p2]=p1;
        rnk[p1]+=rnk[p2];
    }
    else{
        par[p1]=p2;
        rnk[p2]+=rnk[p1];
    }
    return 1;
}

//MST
void solve(){
    int n,m;
    cin>>n>>m;
    vector<pair<int,pii>> edges;
    while(m--){
        int u,v,w; cin>>u>>v>>w;
        edges.pb({w,{u,v}});
    }

    make_set(n);

    sort(all(edges));
    int ans=0, cnt=0;
    for(auto e:edges){
        int w=e.ff, u=e.ss.ff, v=e.ss.ss;
        if(!union_set(u,v)) continue;
        ans+=w;
        cnt++;
        if(cnt==n-1) break;
    }

    if(cnt==n-1) cout<<ans<<"\n";
    else cout<<"IMPOSSIBLE\n";
}
