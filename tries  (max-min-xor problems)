struct node{
    int freq;
    node* child[26];
    node(){
        freq=0;
        for(int i=0;i<26;i++) child[i]=NULL;
    }
};

node* root=new node();

void add(string s){
    node* tmp=root;
    for(int i=0;i<s.size();i++){
        if(tmp->child[s[i]-'a']==NULL){
           tmp->child[s[i]-'a']=new node();
        }
        tmp=tmp->child[s[i]-'a'];
        tmp->freq++;
    }
}

int calc(string s){
    node* tmp=root;
    for(int i=0;i<s.size();i++){
        if(tmp->child[s[i]-'a']==NULL){
           return 0;
        }
        tmp=tmp->child[s[i]-'a'];
    }
    return tmp->freq;
}

//add a number in binary
void add(int n){
    node* tmp=root;
    for(int i=20;i>=0;i--){
        bool b=n&(1LL<<i);
        if(tmp->child[b]==NULL){
           tmp->child[b]=new node();
        }
        tmp=tmp->child[b];
        tmp->freq++;
    }
}

int maxxor(int n)
{
    node* tmp=root;
    int ans=0;
    for(int i=20;i>=0;i--){
        bool b=!(n&(1LL<<i));
        if(tmp->child[b]==NULL){
           tmp=tmp->child[!b];
        }
        else{
            tmp=tmp->child[b];
            ans|=1LL<<i;
        }
    }
    return ans;
}
